<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" 
    xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:content="http://purl.org/rss/1.0/modules/content/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    >
    <channel>
        <title>Reilly Spitzfaden, Composer</title>
        <link>https://reillyspitzfaden.com/blog</link>
        <atom:link href="https://reillyspitzfaden.com/blog/feed.xml" rel="self" type="application/rss+xml" />
        <description>A blog about my personal interests, including C++ audio plugin development, composition/sound design in Max/MSP, open tech, and web development</description>

        <item>
            <title>Hobbies: Reading Fiction Again</title>
            <dc:creator>Reilly Spitzfaden</dc:creator>
            <link>https://reillyspitzfaden.com/blog/06-18-2024</link>
            <guid>https://reillyspitzfaden.com/blog/06-18-2024</guid>
            <pubDate>Tuesday, 18 Jun 2024 00:00 EDT</pubDate>
            <description>Rediscovering reading fiction as I try to use social media for socialization instead of entertainment</description>
            <content:encoded><![CDATA[
                <p >At one point around the end of high school or the beginning of college, I heard about Haruki Murakami's <em>A Wild Sheep Chase</em> in an interview with an indie band I liked. I enjoyed the magical realism. It was something I hadn't encountered before, and while I continue to like that kind of book, I think sometime around that point I overcorrected too far in the direction of seeking out weird stories in mundane settings. I forgot how much I like sci-fi with adventure and action, and I think I had also somehow internalized a sense that stories with "action" in them weren't as "grown-up" to enjoy.</p>
                <p >Because I wasn't being honest with myself about some of the kinds of books I like to read (as well as being very busy with school), I haven't read a lot of fiction in several years. Now that I'm out of school, I've had the time and energy to try reading fiction again, and my relationship with the Internet has given me a particular push in that direction.</p>
                <p >I mentioned in a <a data-tooltip-position="top" aria-label="https://reillyspitzfaden.com/blog/05-17-2024" rel="noopener" class="external-link" href="https://reillyspitzfaden.com/blog/05-17-2024" target="_blank">previous post</a> the idea of "social networks" versus "social media." In other words, using platforms to interact with friends versus using them for entertainment. I've come to the conclusion that I want to do the former and avoid the latter, and in trying to do so, I realized how much I've been leaning on social media for entertainment. </p>
                <p >I struggle to keep hobbies that are clearly separated from my work. As much as I love composing and working with computer music, I like to have activities that I do for fun that aren't just a continuation of my job. In trying to only use social media to interact with people, I'm finding gaps in my time where I'm not occupied and enjoying myself. Rediscovering my love of reading sci-fi has been a major help in finding enjoyable things to do that fit with how I want to interact with the Internet.</p>
                <p >In keeping with my previous habit of reading about weird things happening in mundane situations, I was reading <em>House of Leaves</em> by Mark Z. Danielewski earlier this year. I'm currently about 3/4 through it, and I was enjoying it, but at a certain point reading it was starting to feel like work. </p>
                <p >A few weeks ago I got <em>Neuromancer</em> by William Gibson from the bookstore, and I just finished reading it the other day. I'm currently reading <em>This Is How You Lose the Time War</em> by Amal El-Mohtar and Max Gladstone. Both of these books feel a lot more "snappy" and exciting than some of the things I had been reading, and they're both relatively short. My book choices seem to be working for me a lot better now, and I'm finally starting to feel like I have some momentum in reading fiction again. I'm very excited to have rediscovered this part of my childhood.</p>
            ]]>
            </content:encoded>
        </item>

        <item>
            <title>Making Journaling More Enjoyable</title>
            <dc:creator>Reilly Spitzfaden</dc:creator>
            <link>https://reillyspitzfaden.com/blog/06-04-2024</link>
            <guid>https://reillyspitzfaden.com/blog/06-04-2024</guid>
            <pubDate>Tuesday, 04 Jun 2024 14:06 EDT</pubDate>
            <description>Coming up with a new system for bullet journaling, as well as the fountain pen inks and paper I'm using</description>
            <content:encoded><![CDATA[
                <p>Hi everyone! Since February 2023, I've discovered an interest in fountain pens, and I've been using them for <a href="https://en.wikipedia.org/wiki/Bullet_journal">bullet journaling</a>. I've been enjoying it a lot—I've found some really beautiful inks, and my handwriting has gotten significantly less messy—but for a while I felt I was hitting a wall, and it wasn't as enjoyable of an experience as I thought it could be. The other day however, I had another look at some other people's journals, and I made some updates to my system that have made journaling even nicer to do.</p>

                <h3>My Previous Issues</h3>
                <p>There are a number of features that make something a "bullet" journal, but two of the most important are an index and a key. The index allows you to put everything in one book—it's OK if things are "out of order," or mixed together, since you can find each topic in the index. The key lets you label different kinds of information: to-do lists, thoughts, reminders, etc.</p>

                <p>Previously I was using a dot for to-do items and a line for miscellaneous list items (e.g., composition planning), and then throwing everything else in unmarked. What I realized was that I was mostly using the journal as a fancy to-do list, and that made journaling feel like work. If I didn't manage to complete an item, I felt bad. The two things that ended up helping were adding more key symbols and making a purposeful choice to avoid to-do style lists unless absolutely necessary.</p>

                <h3>My New System</h3>
                <p>My new system (see below) has 5 symbols in the key: to-do; planning (e.g., composition/programming); thoughts and feelings; logging activities I've done; and reminders. The reminders in particular have been nice. Being able to list things I want to do without the intent of crossing them out works better for my brain. I don't feel as pressured to complete the list if there's no visual indication of whether I've completed a task. Also, I find that including symbols for more categories makes those categories feel more "legitimate" and less like an afterthought, as well as making it easier to go back and parse the information. This way, I feel more compelled to write a variety of things other than to-dos, as well as not having that variety of things make my journal look messy.</p>

                <img id="bujo_key" src="media/06-04-2024/bujo_p9_categories_060224.JPG" alt="The key for my bullet journal, with a dot for to-do; line for planning/projects; slashed 'o' for thoughts/feelings; check for activities; and '+' for reminders" />

                <p>An example of this key system in action:</p>

                <img id="bujo_spread" src="media/06-04-2024/bujo_p10_11_060424.jpg" alt="Two facing pages of my journal, with the verso showing blog planning notes, and the recto showing my June 3 day log" />

                <h3>The Writing Tools</h3>

                <img id="writing_supplies" src="media/06-04-2024/bujo_pens_ink_060424.JPG" alt="A bottle of ink, two fountain pens, and a teal-green A5 journal" />

                <p>One thing that's remained constant from the beginning is that the niceness of the inks and paper make it enjoyable. The notebook I have is a <a href="https://www.etsy.com/listing/910203327/a5-tomoe-river-68gsm-180-pgs-cream-white">goodinkpressions</a> notebook with <a href="https://paintspot.ca/art-supplies/artist-paper/japanese-paper-place-washi/awagami-washi-paper/tomoe-river-paper-packs/">Tomoe River</a> paper, which a lot of fountain pen users really like because of how it shows off the shading and character of the ink. </p>

                <p>The ink I've been using the most lately is Platinum <a href="https://mountainofink.com/blog/platinum-lavender-black">Lavender Black</a>. It's an <a href="https://en.wikipedia.org/wiki/Iron_gall_ink">iron gall</a> ink—a formula that dates back at least to Pliny the Elder. As the name suggests, when you write with the ink it starts out a rich magenta, and as the iron salts oxidize, it turns a dark reddish black color. It's really cool to watch! In the show <a href="https://en.wikipedia.org/wiki/The_Owl_House">The Owl House</a>, there's a <a href="https://www.youtube.com/watch?v=b3EfQkb6IMs&t=165s">moment</a> where the character Lilith looks bedgraggled and mentally unwell. As she finishes writing some magical glyphs, she giggles and says "watching the ink dry is the best part!" I know she's supposed to be "losing it," but I genuinely feel like that! </p>

                <p>Overall I really appreciate how fountain pens turn the act of writing into something a little more ceremonial and leisurely. It makes me slow down for a second and be fully in the moment as I write. The paper has a nice sensation under my hand and against the pen tip, and the inks (plus the flexibility to put any ink I want in the pen) make the experience feel extra fancy.</p>
            ]]> 
            </content:encoded>
        </item>

        <item>
            <title>Receiving Webmentions, Part 1</title>
            <dc:creator>Reilly Spitzfaden</dc:creator>
            <link>https://reillyspitzfaden.com/blog/05-21-2024</link>
            <guid>https://reillyspitzfaden.com/blog/05-21-2024</guid>
            <pubDate>Tue, 21 May 2024 00:00 EDT</pubDate>
            <description>Setting up my blog to receive Webmentions</description>
            <content:encoded><![CDATA[
                <p>Hi everyone! I recently set up my blog to receive <a href="https://en.wikipedia.org/wiki/Webmention">Webmentions</a>, which means that if somebody wants to link to one of my posts from their website, I can get a notification about their post. I like this because it allows people in the <a href="https://indieweb.org">IndieWeb</a> community to use our websites kind of like social media — to have conversations with each other — but outside of the silos of social media.</p>

                <p>I got the basics taken care of for now, and in a future update I will make it easier for people to send them to me, as well as adding a way to display them as comments on the appropriate post.</p>

                <h3>How I Did It</h3>
                <p>I used <a href="https://webmention.io">Webmention.io</a> for my Webmentions, which made the whole process pretty simple on my end. First I went to Webmention.io and signed in with my website. When you type your website URL into the sign in field, it looks for a <code class="language-html">rel="me"</code> link. In my case, I have the following HTML tag in the <code class="language-html">&lt;head&gt;</code> of my page:</p>

<pre><code class="language-html">&lt;link rel="me" href="https://github.com/reillypascal" /&gt;</code></pre>

                <p>In other words, I'm using my GitHub account to sign in to Webmention.io. This is called <a href="https://microformats.org/wiki/RelMeAuth">RelMeAuth</a>, and if you don't want to use a silo website such as GitHub, you can also use <a href="https://indieweb.org/IndieAuth">IndieAuth</a>, which I will likely set up in the future.</p>

                <p>If I type my URL into the login bar now, Webmention.io will redirect me to a login page where I can approve the sign-in via GitHub. Once I've logged in, I can simply place the following tag in the <code class="language-html">&lt;head&gt;</code> of my homepage:</p>

<pre><code class="language-html">&lt;link rel="webmention" href="https://webmention.io/reillyspitzfaden.com/webmention" /&gt;</code></pre>

                <p>The general format is as follows (this is also given on Webmention.io once you've logged in):</p>

<pre><code class="language-html">&lt;link rel="webmention" href="https://webmention.io/&lt;username&gt;/webmention" /&gt;</code></pre>

                <p>Where "<code class="language-http">&lt;username&gt;</code>" is usually the URL of your site.</p>

                <h3>One More Thing</h3>
                <p>At this point you could previously go <a href="https://webmention.io/dashboard">here</a> and see any Webmentions that came in. However, there is one new feature to be aware of. I tested out my site using the "<a href="https://webmention.rocks/receive/1">Receiver Test #1</a>" at <a href="https://webmention.rocks">webmention.rocks</a>, and it was giving me a 404 error. When I talked to Webmention.io's creator Aaron Parecki in the <a href="https://chat.indieweb.org/">IndieWeb chat</a>, I learned that there are some new updates. As discussed in <a href="https://github.com/aaronpk/webmention.io/issues/182">this</a> GitHub issue, Aaron wants to prevent Webmention.io from automatically accepting mentions for anybody who does not explicitly  ask for it. As a result, one final step is that you need to go <a href="https://webmention.io/settings/sites">here</a> after signing into Webmention.io, and enter your site URL in the box. At this point, the receiver test worked flawlessly for me.</p>

                <h3>Going Forward</h3>
                <p>If you have Webmentions set up, please send me one if you link to my blog posts! I always appreciate connecting with other IndieWeb people. If you're just getting started with Webmention.io, you should be able to go to <code class="language-http">https://webmention.io/&lt;username&gt;/xmlrpc</code>, where <code class="language-http">&lt;username&gt;</code> is your site URL, and send me one. Soon I will be adding a field to my blog posts so you can submit the URL of your post right on my site. I will also make it so when you click the button to load comments, Webmentions I've received for the post will be displayed alongside the comments.</p>

                <h3>Fun Fact of the Day</h3>
                <p>Speaking of blogs, "blog" comes from "web-log," but did you know that "log" (in the sense of "log-book") comes from "log" as in a log from a tree? I like to browse <a href="https://etymonline.com">Etymonline</a> for fun, and the page for <a href="https://www.etymonline.com/word/log#etymonline_v_43590">log</a> (as in "log-book") explains that sailors would place a chip of a tree log in the water on the end of a rope with knots at regular intervals, and used the rate at which the knots passed by to tell the ship's speed. Isn't etymology great?</p>
            ]]> 
            </content:encoded>
        </item>

        <item>
            <title>Healthy, Sustainable Social Internet</title>
            <dc:creator>Reilly Spitzfaden</dc:creator>
            <link>https://reillyspitzfaden.com/blog/05-17-2024</link>
            <guid>https://reillyspitzfaden.com/blog/05-17-2024</guid>
            <pubDate>Fri, 17 May 2024 15:40 EDT</pubDate>
            <description>Thinking through what I want from the social internet, and the difference between a social "network" and social "media"</description>
            <content:encoded><![CDATA[
                <p>I read two articles recently that clarified a lot of what I had been thinking about interacting with people online. I have been feeling some nostalgia for early days of the internet, including nostalgia for things like <a href="https://en.wikipedia.org/wiki/Bulletin_board_system">BBSs</a> and <a href="https://en.wikipedia.org/wiki/IRC">IRC</a> for which I wasn't even around. The <a href="https://en.wikipedia.org/wiki/Fediverse">Fediverse</a> has been offering some improvement — I like <a href="https://hachyderm.io/@reillypascal">my Mastodon account</a>. However, these articles got me thinking about <em>how</em> a social network tool is used, not just <em>which one</em> to use.</p>

                <p>Ian Bogost <a href="https://www.theatlantic.com/technology/archive/2022/11/twitter-facebook-social-media-decline/672074/">writes</a> in The Atlantic (<a href="https://archive.ph/PPXNV">archived copy</a>):</p>
                <blockquote>
                <p>The whole idea of social networks was networking: building or deepening relationships, mostly with people you knew. How and why that deepening happened was largely left to the users to decide.</p>
                <p>That changed when social networking became social media around 2009, between the introduction of the smartphone and the launch of Instagram. Instead of connection—forging latent ties to people and organizations we would mostly ignore—social media offered platforms through which people could publish content as widely as possible, well beyond their networks of immediate contacts. Social media turned you, me, and everyone into broadcasters (if aspirational ones). The results have been disastrous but also highly pleasurable, not to mention massively profitable—a catastrophic combination.</p>
                </blockquote>

                <p>And Ellis Hamburger, a former worker at Snapchat <a href="https://www.theverge.com/2023/4/18/23672769/social-media-inevitable-death-monetization-growth-hacks">writes</a> in The Verge:</p>
                <blockquote>
                <p>Today, the product evolution of social media apps has led to a point where I’m not sure you can even call them social anymore — at least not in the way we always knew it.</p>
                <p>They each seem to have spontaneously discovered that shortform videos from strangers are simply more compelling than the posts and messages from friends that made up traditional social media. Call it the carcinization of social media, an inevitable outcome for feeds built only around engagement and popularity.</p>
                </blockquote>

                <p>I love the reference to "<a href="https://en.wikipedia.org/wiki/Carcinisation">carcinization</a>," but most important from both articles is the contrast between "networks" and "media," as Bogost puts it. I've been finding my usage of Instagram in particular to be shifting toward following strangers who I find entertaining instead of interacting with people I know.</p>

                <p>I don't have anything against entertaining posts from strangers, but I want somewhere I regularly interact with people as I would if we were socializing in person. I recently finished grad school, and my job as a college lecturer involves a lot of working on my own, which means my days don't have the kind of regular, casual interaction I valued so much in school built into them anymore. I'm very introverted, so "ambient" interactions with people are a lot easier than scheduling more intense, focused interactions as I have to do now. I think the internet has the capacity to provide some of that "ambient" interaction I crave, but now I need to think about how to accomplish this.</p>

                <h3>How should I find or create these interactions?</h3>
                <p>One thing that has helped me was that earlier this year I saw someone (I forget who) mention that the Fediverse places a high premium on directly interacting with people, even strangers, and that has emboldened me to join in on conversations, which led to positive interactions.</p>

                <p>As I interact with <a href="https://indieweb.org/">IndieWeb</a> circles more, I want to continue these interactions with fellow IndieWeb bloggers as well — through sharing, commenting, or using technologies like <a href="https://webmention.net/">Webmention</a>, which I recently added to my site, but also through more "traditional" social media or the Fediverse. I'm encouraged to do so by commentary from IndieWeb people, such as Tracy Durnell <a href="https://tracydurnell.com/2024/03/01/indieweb-interactions-what-builds-connection/">writing</a> that</p>
                <blockquote>
                <p>Building a trail can be an intense, concerted effort, but simply a few people walking in the same line can leave a faint path through the forest (you see this from deer trails). Choosing to walk together is how you can build a shared link with someone new. The more times you walk it together, the deeper you’ll wear your shared track. A new trail doesn’t have to involve explosives and hard manual labor right off the bat. Just walking together is enough to start.</p>
                </blockquote>

                <p>It's nice to be reminded that small, "ambient" interactions have value, not only to me, but to the people around me.</p>

                <h3>Final Thoughts</h3>
                <p>That's all for today! I'm still figuring out my thoughts on all this, but I've been inspired by Maggie Appleton's discussion of "<a href="https://maggieappleton.com/garden-history">digital gardens</a>," and I'm pushing myself to write even if I'm still working through an idea.</p>
            ]]> 
            </content:encoded>
        </item>

        <item>
            <title>Glitchy Lofi Piano Looper + Radio - Part 1</title>
            <dc:creator>Reilly Spitzfaden</dc:creator>
            <link>https://reillyspitzfaden.com/blog/05-04-2024</link>
            <guid>https://reillyspitzfaden.com/blog/05-04-2024</guid>
            <pubDate>Sat, 04 May 2024 00:47 EDT</pubDate>
            <description>Max/MSP sample mangling with lo-fi piano, percussion, and vinyl noise for my work-in-progress 'Forget your name'</description>
            <content:encoded><![CDATA[
                <p>Hi everyone! Today's post is on <a href="https://en.wikipedia.org/wiki/Max_(software)">Max/MSP</a> sound design. I'll be talking about how I got <a href="https://hachyderm.io/@reillypascal/112242684024114281">this sound</a> I posted about on my <a href="https://hachyderm.io/@reillypascal">Mastodon</a> a few weeks ago. It's part of a trio I'm writing for MIDI keyboard, clarinet, and percussion tentatively titled <em>Forget your name</em>.</p>
                                
                <p>I mentioned in my <a href="https://reillyspitzfaden.com/blog/02-27-2024">Feb. 27 post</a> that I've been using the <a href="https://github.com/ericlyon/FFTease3.0-MaxMSP"><code>fftz.ether~</code></a> Max/MSP object to combine the spectra of two sounds. It compares each FFT bin between the two sounds, and selects the one that's either quieter or louder, depending on the settings. Here I'm using it to combine glitching lofi piano/percussion with various radio sounds.</p>

                <p>Since I'm busy finishing up my semester of teaching, I'll be splitting this between two or so posts. Today, let's look at how I made the looping piano snippets. You can download the patch <a href="https://mega.nz/folder/ge9wVAqT#3PeZp-8-t6B7plrMvAICJg">here</a>.</p>

                <h3>Making the Piano Snippets</h3>
                <p>To start, I combined some lofi piano, bell, and percussion sounds, and used iZotope's <a href="https://www.izotope.com/en/products/vinyl.html">Vinyl</a> plugin to add a <strong>large</strong> amount of record noise. The source samples are by <a href="https://freesound.org/people/holizna/">holizna</a> on freesound.org, and he kindly released them under a <a href="https://creativecommons.org/publicdomain/zero/1.0/">CC0</a> license. I used Logic Pro to split the audio at the <a href="https://support.apple.com/en-ca/guide/logicpro/lgcp21586c87/mac">transients</a> (select a region; ctrl + cmd + shift + S). I then exported all of the resulting snips as individual audio files. Here is the audio before chopping at the transients:</p>

                <audio controls>
                    <source src="https:reillyspitzfaden.com/blog/media/05-04-2024/kpo_beat_transient_loop_1.mp3" type="audio/mp3">
                </audio>

                <h3>Loading the Snippets into a <a href="https://docs.cycling74.com/max8/refpages/polybuffer~"><code>polybuffer~</code></a> in Max/MSP</h3>
                <p>The <code>polybuffer~</code> object can load multiple sound files into a collection of buffers that it manages, which can be independently accessed and assigned to a <code>groove~</code> object for playback. I send the <code>polybuffer~</code> the message "readfolder" followed by the absolute path to the subfolder in which I store the audio snippets. You can get the absolute path to the parent patch by sending <code>thispatcher</code> a "path" message, and then use <code>combine</code> to add the path for the subfolders.</p>

                <p>After instructing <code>polybuffer~</code> to load the files, I send it the message "getbufferlist", which causes it to output the word "bufferlist", the buffers one-by-one, and then the message "bufferlist done". If I filter out the words "bufferlist" and "done" using <code>zl.filter</code>, I can collect the buffers into a single list with <code>zl.group</code>. I can listen for the word "done" using a <code>sel</code> object (placed "upstream" of the <code>zl.filter</code>s), and send a bang to <code>zl.group</code> to output the finished list. Prepending "store 0" before the list of buffers stores the list in a <code>coll</code> object (essentially a lookup table) at the index 0 for the next step. I repeat this whole process to add snippets of record clicks and pops to the same <code>coll</code> at index 1. The patch so far is shown below:</p>

                <img src="https:reillyspitzfaden.com/blog/media/05-04-2024/polybuffer_loader.webp" 
                    alt="Max/MSP patch described by the previous two paragraphs, with two polybuffer~ objects being loaded with samples from folders, and the lists of buffers from the polybuffer~s being loaded into a coll named cylinder_samp." 
                    id="polybuffer_loader_img"/>

                <h3>Looping and Mangling the Snippets</h3>
                <p>By naming the <code>coll</code> objects in the <code>sample_chooser</code> subpatcher the same as the one from the previous step, I'm able to access this list of buffers in the playback section of the patch. First I dump the entire list of buffers and use <code>zl.len</code> (gets length of a list) to get the number of sub-buffers. I can then use this length to set the size for an <code>urn</code> object (random without repeats), and use the random numbers from the <code>urn</code> along with the "nth" message to select buffers at the appropriate index from the <code>coll</code>. Note that you will have to add one to the random values from <code>urn</code> because the "nth" method starts at one instead of zero — this fact regularly trips me up. The <code>vinyl_pops_chooser</code> subpatcher does the same thing with the list of samples at index 1 in the <code>coll</code>. The contents of this subpatcher are shown below:</p>

                <img src="https:reillyspitzfaden.com/blog/media/05-04-2024/coll_random_select.webp" 
                    alt="Max/MSP patch described by the previous two paragraphs, with a coll object named cylinder_samp as before, and logic to get the length at index 0; generate random numbers without repeats up to that length; and retrieve the buffer name at index 0, and a random point into the list of buffers." 
                    id="coll_random_select_img"/>

                <p>I have a metronome object plus a random number generator sending out a clock pulse that varies in rate with each pulse. I use that with a chain of counters to periodically load new buffers from the <code>polybuffer~</code> into <code>groove~</code> for playback. Throughout the patch I have subpatchers labeled <code>%_gate</code> — these are "Bernoulli gates." When a message or bang enters the gate, the subpatcher makes a random number between 0–100; checks if that value is less than or equal to a threshold; and if so, allows the message/bang through. The <code>patcherargs</code> object in these subpatchers gets the number typed after the patcher name and uses this as a threshold/probability for the gate. See below:</p>

                <img src="https:reillyspitzfaden.com/blog/media/05-04-2024/metro_counter_logic.webp" 
                    alt="The metronome, on/off toggle, and counter logic from the patch."/>

                <p>I randomly set the playback length either equal to the snippet, or equal to a subsection of the snippet, and if it's a subsection, I set the <code>groove~</code> object to loop. I get the length of a snippet by using the <code>info~</code> object and setting that to reference the appropriate buffer. A nice result of choosing random subsections to loop is that sometimes these sections are extremely short, and looping them produces a high-pitched, glitchy tone that pops out of the texture.</p>

                <p>I have the groove object set to time stretching mode, and based on a probability I set, I play the snippet back either slowly or at normal rate. I also randomly shift the <a href="https://en.wikipedia.org/wiki/Formant">formant</a> up or down within a small selected range. See below:</p>

                <img src="https:reillyspitzfaden.com/blog/media/05-04-2024/sample_chooser_groove.webp"
                    alt="The speed, looping, sample chooser, formant modulation, and pitch-shift logic, all going into a groove~ object."
                    />

                <p>Finally, I have another <code>polybuffer~</code> loaded with short vinyl scrapes and pops, and using a similar setup to the piano snippets, I periodically play one of those back. All together, the mangling sounds like this: </p>

                <audio controls>
                    <source src="https:reillyspitzfaden.com/blog/media/05-04-2024/kpo_beat_transient_mangle_1.mp3" type="audio/mp3">
                </audio>

                <h3>Conclusion</h3>
                <p>That's all for today! I'm finishing up my semester of teaching, and you can expect a part two for this soon. Please feel free to download <a href="https://mega.nz/folder/ge9wVAqT#3PeZp-8-t6B7plrMvAICJg">this patch</a> and play around with it in the meantime. I'm also interested in feedback on this post. My aim is for it to be a good amount of explanation for a relatively broad audience &mdash; not so deep that it loses people, but not leaving out necessary detail. If you could comment letting me know how you found it, that would be appreciated!</p>

            ]]> 
            </content:encoded>
        </item>

        <item>
            <title>New Album Announcement</title>
            <dc:creator>Reilly Spitzfaden</dc:creator>
            <link>https://reillyspitzfaden.com/blog/04-05-2024</link>
            <guid>https://reillyspitzfaden.com/blog/04-05-2024</guid>
            <pubDate>Fri, 05 Apr 2024 00:00:00 EDT</pubDate>
            <description>My trio 'If this reaches you' is on Apply Triangle's new album, out on April 12!</description>
            <content:encoded><![CDATA[
                <p>One of my compositions is on an upcoming album &mdash; <a href="https://applytriangle.bandcamp.com/album/oxalis-triangularis-vol-2"><cite>Oxalis Triangularis: Vol. 2</cite></a> by <a href="https://applytriangle.com/">Apply Triangle</a>! The ensemble is a NYC-based electroacoustic trio comprising Yoshi Weinberg (flutes), Tyler Neidermayer (clarinets), and Jixue Yang (piano/keyboards).</p>
                <p>The full album is a <a href="https://applytriangle.bandcamp.com/album/oxalis-triangularis-complete-volumes-1-3">3-disc set</a>, and my piece &mdash; <cite>If this reaches you</cite> &mdash; will be on <a href="https://applytriangle.bandcamp.com/album/oxalis-triangularis-vol-2">volume 2</a>.<br />
                It comes out on April 12, and you can pre-order in digital and CD format now!</p>
                
                <h3>Composing <cite>If this reaches you</cite></h3>
                <p>When I wrote the piece, I had recently discovered <a href="https://en.wikipedia.org/wiki/Software-defined_radio">software-defined radio</a>. I use an <a href="https://www.rtl-sdr.com/about-rtl-sdr/">RTL-SDR</a> receiver — a small USB dongle that contains a tuner and ADC chip — and the tuning and demodulation is handled in the computer, using software like <a href="https://www.sdrpp.org/">SDR++</a> or <a href="https://airspy.com/download/">SDRSharp</a>.</p>
                <p>The receiver can pick up analog voice communication (e.g., ambulances, air traffic controllers, etc.), and digitally-encoded transmissions such as pagers, clock synchronization signals, and weather map faxes. Fun fact: the background image for my site is one such weather fax! The digital communications sound something like a <a href="https://freesound.org/people/wtermini/sounds/546450/">dial-up modem</a>, and work in a similar way. The analog voice sounds crackly and staticky, and I can often hear sounds in the background, giving fascinating, but extremely limited glimpses into what's happening on the other end.</p>
                <p>Especially in <a href="https://en.wikipedia.org/wiki/Shortwave_bands">shortwave bands</a>, the signals I picked up often came from great distances — at one point, I picked up a station from Japan. As I listened, I felt both connected to all the signals' sources, but also a great sense of distance and loneliness. As I found ways to combine the radio sounds with unusual and experimental sounds from the instruments, the radio sounds strongly evoked memory, loss, nostalgia, and distance for me.</p>
                
                <h3>Technical Notes</h3>
                <p>To play the radio sounds, I made a Max/MSP patch for the pianist that assigns radio samples to the lower keys, and has a bright, electric piano sound on the higher ones. The clarinetist plays a variety of <a href="https://heatherroche.net/category/multiphonic/">multiphonics</a> and other extended techniques, and the flutist also has a cardboard box to scrape with a cello/bass bow.</p>
                
                <h3>Program Note</h3>
                <p>I wrote a short poem as a program note for the piece:</p>
                <blockquote>
                <p>I watched the space between the houses undergo a sea change<br />
                Into something slippery and strange<br />
                Though it wasn’t mine to hold, I still carry it with me</p>
                <p>I walked as far as daylight would take me<br />
                The wires stayed the same<br />
                I brought them back anyway to show that I had done my due diligence</p>
                <p>A satellite floated overhead today and reminded me of home</p>
                <p>I can hear it now<br />
                I am not the only one left to tell the tale</p>
                <p>A letter came, but the sky had already touched the ground behind me, so I kept walking</p>
                </blockquote>
                
                <h3>The Project</h3>
                <p>Here's the announcement from the ensemble:</p>
                <blockquote>
                <p>Announcing <cite>Oxalis Triangularis</cite> &mdash; a triple album of thirty-three new works from thirty-three composers recorded in a fully remote setting by Apply Triangle. The project was developed through a call for scores in the summer of 2020 and stems from the resilience of artists to continue to create through a global pandemic. It is a testament to the flexibility and creativity possible through electroacoustic composition.</p>
                <p>Oxalis Triangularis refers to the scientific name for a purple “false shamrock” due to its triangle-like leaves. Throughout three albums Apply Triangle not only showcases the innovative techniques of 33 living composers but also highlights the embodied cultural nuances inherent in each composer’s style.</p>
                </blockquote>
                <p>Thanks for reading, and I would love if you check out the album!</p>
            ]]> 
            </content:encoded>
        </item>
        <item>
            <title>RSS Is Nice</title>
            <dc:creator>Reilly Spitzfaden</dc:creator>
            <link>https://reillyspitzfaden.com/blog/03-10-2024</link>
            <guid>https://reillyspitzfaden.com/blog/03-10-2024</guid>
            <pubDate>Sun, 10 Mar 2024 00:00:00 EST</pubDate>
            <description>My process of adding RSS to my blog, my rediscovery of how nice RSS is, and some music blogs I've been enjoying</description>
            <content:encoded><![CDATA[
                <p>This past week I added <a href="https://en.wikipedia.org/wiki/RSS">RSS</a> to my blog! Here I'll talk about the process of doing that, my rediscovery of how nice RSS is, and some music blogs I've been enjoying. If you want to follow my blog, <a href="https://reillyspitzfaden.com/blog/feed.xml">here's the link</a>.</p>
                <h3>RSS for my Blog</h3>
                <p>I started out by trying to make my blog automatically generate the RSS feed — all I would have to do is upload the files to Netlify as I normally do. The first place I looked was at this <a href="https://www.contentful.com/blog/generate-blog-rss-feed-with-javascript-and-netlify/">article</a>, with the <a href="https://www.npmjs.com/package/jsdom">jsdom</a> NPM package to handle parsing my HTML files where this post used <a href="https://www.contentful.com/about-us/">Contentful</a>'s built-in system. As I tried this and some related avenues out, I became unhappy with the number of steps involved, and auto-generating started to feel like more work than simply hand-writing an XML file.</p>
                <p>When I looked into it, I found that hand-writing an RSS XML file was even easier than I assumed, and didn't hinder my wanting to make new posts. The <a href="https://www.rssboard.org/rss-specification">RSS specification</a> is all clearly laid out, and the official page includes <a href="https://www.rssboard.org/rss-specification#sampleFiles">sample files</a> for v0.91, v0.92, and v2.0. My current system is that I have a <a href="https://github.com/reillypascal/personalsite/blob/main/reillyspitzfaden/blog/templates/template.xml">template</a> in my site files, and I can copy/paste the <code>&lt;item&gt;</code> section into the main feed file and fill in the blanks.</p>
                <p>This method is still a little "rough-and-ready," what with the copy-pasting, but the important thing for me is that it <em>works</em>. After seeing Molly White <a href="https://hachyderm.io/@molly0xfff/111960696197094015">mention</a> it, I have been eyeing the IndieWeb wiki's discussion of <a href="https://indieweb.org/content_management_system#Why_write_your_own">making your own CMS</a>, and I may try improving my system with something like that — not integrated with Netlify, but I could run a homemade static site generator before uploading my files. My best guess so far is I could use the <a href="https://www.npmjs.com/package/rss">rss</a> NPM package as one way of handing the RSS part of a CMS, but if people have suggested tools, I would love to hear about them!</p>
                <p>Side note: one final tweak I did outside of RSS is adding a typographical <a href="https://en.wikipedia.org/wiki/Asterism_%28typography%29">asterism</a> to my blog posts, inspired by jamesg's recent "<a href="https://jamesg.blog/2024/02/19/personal-website-ideas/">100 things you can do on your personal website</a>" post.</p>
                <h3>Why RSS</h3>
                <p>For a while I would follow news outlets on social media and look for stories there, but I've found that this makes using social media feel like playing Russian roulette — I never know if I'm going to see something funny a friend posted, some cool new music, or an atrocity I have no control over. Separating out my news so I have more choice over what to read and when means I'm much less anxious, while still staying engaged with what's going on around me.</p>
                <p>In addition to giving me more control over what I see and when, and helping me keep track of a large number of sites, one thing I especially like is how clean the interface can be, and how I get to decide how it looks. I use <a href="https://netnewswire.com/">NewNewsWire</a>, and when I open an article, it's just text and maybe a few images, and everything is formatted the same. The list of articles too — articles are linearly organized, rather than scattered around the page. The whole experience feels much quieter and more relaxed.</p>
                <h3>Favorite Blogs</h3>
                <p>I follow a variety of things, but one area that's been especially nice is experimental music. I spent the past year or two listening to mostly the same music (such as <a href="https://autechre.bandcamp.com/album/draft-730">Autechre</a>, <a href="https://fire-toolz.bandcamp.com/album/rainbow-bridge">Fire-Toolz</a>, and <a href="https://magdalenabay.bandcamp.com/album/mercurial-world">Magdalena Bay</a>), but being in Fediverse/IndieWeb circles, I've stumbled onto a bunch of blogs and artists that give me a huge amount of new music to explore. It took me a bit of time in these circles, but when I found the first few blogs or artists, I came across countless others in rapid succession, often as a result of previous blogs or artists. Here are some of my favorites:</p>
                <ul>
                <li><a href="https://acloserlisten.com/">a closer listen</a><ul>
                <li>This site focuses on instrumental album reviews. I appreciate that the <a href="https://acloserlisten.com/staff/">writers</a> are numerous and prolific — I get reviews in my inbox every day. <a href="https://acloserlisten.com/rss">RSS</a></li>
                </ul>
                </li>
                <li><a href="https://avantmusicnews.com/">Avant Music News</a><ul>
                <li>AMN has been a particularly helpful jumping-off point. They do a mixture of their own reviews and sharing reviews from other sites. They describe themselves as covering music that's "challenging, interesting, different, progressive, introspective, or just plain weird" — exactly what I like to hear. <a href="https://avantmusicnews.com/rss">RSS</a></li>
                </ul>
                </li>
                <li><a href="http://www.onthefringesofsound.com/">Fringes of Sound</a><ul>
                <li>A blog that covers "independent experimental, ambient, noise, and other music that falls well outside the mainstream." I haven't been able to find out as much as some of the others, but the Instagram page lists just one person, a <a href="https://www.instagram.com/lars_haur/">Lars Haur</a>, so this may be a single-person project. <a href="https://www.onthefringesofsound.com/feeds/posts/default?alt=rss">RSS</a></li>
                </ul>
                </li>
                <li><a href="https://www.outsidenoise.org/reviews/">Outside Noise</a><ul>
                <li>I had known about this blog for a while, but I found that keeping my news and blogs in a bookmarks folder and having to repeatedly check to see if anything new was posted discouraged me from reading. I also find managing bookmarks on my phone to be especially irritating, and unfortunately, if I don't have something on my phone I'm less likely to check it. <a href="https://www.outsidenoise.org/reviews?format=rss">RSS</a></li>
                </ul>
                </li>
                <li><a href="https://yeahiknowitsucks.wordpress.com/">Yeah I Know It Sucks</a><ul>
                <li>This one I had actually encountered back in 2018 when they did a <a href="https://yeahiknowitsucks.wordpress.com/2018/01/04/how-things-are-made-with-reilly-spitzfaden-jamie-vandermolen-maurice-rickard-and-an-eel/">review</a> of an album that included one of my pieces! I was reminded of the blog when another blog (I feel like it was AMN, but I can't find the post) linked to a review by Yeah I Know It Sucks, and I saw that they have continued regular coverage of interesting music. <a href="https://yeahiknowitsucks.wordpress.com/rss">RSS</a></li>
                </ul>
                </li>
                </ul>
                <h3>Final Thoughts</h3>
                <p>That's all for today! I'm looking at adding some new features to my site (<a href="https://en.wikipedia.org/wiki/Webmention">Webmentions</a> are high on my list), and I'm continuing to do sound design and composition. When I get more interesting sounds made or site features added, I'll definitely do a writeup of those here as well.</p>
                <p>I've also been getting back into reading for fun, now that I'm out of school (finished my composition PhD in 2022), and I may discuss some of the books I'm reading. I recently got "<a href="http://www.kristengallerneaux.com/high-static-dead-lines">High Static; Dead Lines</a>" by Kristen Gallerneaux, "<a href="https://en.wikipedia.org/wiki/House_of_Leaves">House of Leaves</a>" by Mark Z. Danielewski, and "<a href="https://en.wikipedia.org/wiki/This_Is_How_They_Tell_Me_the_World_Ends">This Is How They Tell Me the World Ends</a>" by Nicole Perlroth, and I'm excited for all of them.</p>
            ]]> 
            </content:encoded>
        </item>

        <item>
            <title>Listening and Reading List — Mar. 1, 2024</title>
            <dc:creator>Reilly Spitzfaden</dc:creator>
            <link>https://reillyspitzfaden.com/blog/03-01-2024</link>
            <guid>https://reillyspitzfaden.com/blog/03-01-2024</guid>
            <pubDate>Fri, 01 Mar 2024 00:00:00 EST</pubDate>
            <description>Links and discussion of what I'm currently listening to and reading</description>
            <content:encoded><![CDATA[
                <h3>What I've been listening to</h3>
                <ul>
                    <li><a href="https://patrickcarey.bandcamp.com/album/collapse-etiquette"><em>Collapse Etiquette</em></a>, by Patrick Carey
                        <ul>
                            <li>Both aggressive/noisy and ambient. There are bright additive and saw synths, and a bunch of intense, percussive, glitchy noise. Each of the 9 tracks maintains a consistent energy &mdash; always the same material, but always different, like the motion of a mobile. Overall, the album reminds me of tuning a radio through a "new age" station with poor reception, and I found it inspiring for my own work.</li>
                        </ul>
                    </li>
                    <li>"<a href="https://alexanderpanos.bandcamp.com/track/cycles-2">Cycles</a>" by Alexander Panos
                        <ul>
                            <li>I first discovered him via his "<a href="https://payhip.com/b/h9l7V">Color Transfer</a>" Max for Live bundle, which makes some very cool sounds. This track is heavy on the granular sounds and "mulched-up" drums, but it also has poppy and traditionally "pretty" chords and vocals, and moments where the meter becomes clear. A beautiful and unique piece.</li>
                        </ul>
                    </li>
                </ul>
                <h3>What I've been reading</h3>
                <ul>
                    <li>Nathan Ho's <a href="https://nathan.ho.name/posts/cepstrum/">blog post</a> on creative uses of <a href="https://en.wikipedia.org/wiki/Cepstrum">cepstral</a> processing.
                        <ul>
                            <li>I've been interested in doing this in my own sound design, but FFT processing in Max is one area I need more work. Nathan uses SuperCollider, and while I like what it can do, I prefer to write for other people to perform, so I like Max's ability to make robust GUIs for my performers. This post looks like it will be helpful in understanding the cepstrum and using it in Max.</li>
                        </ul>
                    </li>
                    <li>Tom Coates' <a href="http://plasticbag.org/archives/2024/01/how-threads-will-integrate-with-the-fediverse/">post</a> on how Threads will integrate with the <a href="https://en.wikipedia.org/wiki/Fediverse">Fediverse</a>.
                        <ul>
                            <li>I'm intensely torn on Threads, Bluesky, potential Tumblr <a href="https://en.wikipedia.org/wiki/ActivityPub">ActivityPub</a> support, etc. I love the Fediverse; I would like to interact with as many of my friends as possible on it; and Cory Doctorow's <a href="https://www.versobooks.com/products/3035-the-internet-con"><em>The Internet Con</em></a> has gotten me excited about interoperability, so on one hand, I would like as many things as possible to connect to the Fediverse. On the other hand, part of what makes the Fediverse great is the non-commercial nature, and I don't want Meta to "<a href="https://en.wikipedia.org/wiki/Embrace,_extend,_and_extinguish">embrace, extend, extinguish</a>" it.</li>
                        </ul>
                    </li>
                </ul>

                <h3>What I've been doing</h3>
                    <ul>
                        <li>The W3C <a href="https://indieweb.org/Social_Web_Incubator_Community_Group">Social Web Incubator Community Group</a> (which includes stakeholders such as Meta) was brought up at Wednesday, Feb. 28's IndieWeb <a href="https://indieweb.org/Homebrew_Website_Club">Homebrew Website Club</a> Pacific meeting. A member mentioned that at one meeting, there was discussion of <a href="https://github.com/Letterbook/FEP/tree/web-based-protocol-handlers">extensions</a> to ActivityPub, and that he was able to voice concern that this could lead to an "embrace, extend, extinguish" situation. It looks like anyone can join the mailing list and meetings (see <a href="https://www.w3.org/community/socialcg/">this</a> page), and I will be joining today. It does encourage me that there is this way for the Fediverse community to get involved and help shape the future of ActivityPub.</li>
                    </ul>
                ]]> 
            </content:encoded>
        </item>

        <item>
            <title>Composition Journal — Feb. 27, 2024</title>
            <dc:creator>Reilly Spitzfaden</dc:creator>
            <link>https://reillyspitzfaden.com/blog/02-27-2024</link>
            <guid>https://reillyspitzfaden.com/blog/02-27-2024</guid>
            <pubDate>Tue, 27 Feb 2024 00:00:00 EST</pubDate>
            <description>Spectral compositing sound design from my work-in-progress "Forget your name"</description>
            <content:encoded><![CDATA[
            <p>I'm currently working on a piece for (tentatively) B-flat clarinet; MIDI keyboard/Max; and a percussionist playing a mix of standard instruments, "junk," and feedback setups.</p>
            <p>One of the sound design techniques I've been enjoying lately is making a "spectral composite" of two sounds using Eric Lyon's "<a href="https://github.com/ericlyon/FFTease3.0-MaxMSP">FFTease</a>" Max/MSP package. I'm using the <code>fftz.ether~</code> object, which:</p>
            <ul>
            <li>Takes the FFT of two sounds</li>
            <li>Compares the corresponding bin between the two FFTs</li>
            <li>Takes either the louder or quieter of the two, depending on the settings</li>
            <li>The choice can also be "weighted" toward one source or the other</li>
            </ul>

            <p>I particularly like the effect of taking the quieter of the two. It's great for combining a more sustained sound and one with a percussive envelope. As the percussive sound decays, more and more of its bins "win out," imparting a percussive envelope on the output.</p>

            <h3>Sound 1: tonal/sustained</h3>
            <p>For today's sound, my sustained, tonal source was made with the open-source <a href="https://surge-synthesizer.github.io">Surge XT</a> synthesizer. Surge XT contains an oscillator titled "Twist" that appears to be an implementation of Mutable Instruments' "<a href="https://pichenettes.github.io/mutable-instruments-documentation/modules/plaits/">Plaits</a>" Eurorack module. I'm using one of the organ-like wavetables to create a sound that rapidly morphs between low and high harmonics. Additionally, Surge XT supports microtuning, and I'm using the 131313... mode of <a href="https://en.xen.wiki/w/20edo">20-edo</a>.</p>

            <audio controls>
                <source src="https:reillyspitzfaden.com/blog/media/02-27-2024/plaits_organ_rand_sweeps_2.mp3" type="audio/mp3">
            </audio>

            <p>I then used a trick I've discovered to make samples sound like they're played through an untuned FM radio. I have a collection of samples of just raw radio static. If I use those samples to modulate a delay on my source, the static convincingly changes in amplitude along with the sample.</p>
            <audio controls>
                <source src="https:reillyspitzfaden.com/blog/media/02-27-2024/radio_synth_fft.mp3" type="audio/mp3">
            </audio>

            <p>In addition to sounding cool, the static gives the next stage something to "chew on." I used the phase vocoder from <a href="https://cycling74.com/tutorials/the-phase-vocoder-–-part-i">Cycling '74's</a> tutorial to time stretch my staticky chords, and the static causes all kinds of nice artifacts in the phase vocoder. After this, I added a little bit of saturation because having <code>fftz.ether~</code> pick the quieter bin can sometimes sound a bit dull.</p>
            <audio controls>
                <source src="https:reillyspitzfaden.com/blog/media/02-27-2024/radio_synth_fft_pvoc.mp3" type="audio/mp3">
            </audio>

            <h3>Sound 2: noisy/rhythmic</h3>
            <p>On the other side, I started with a sine wave oscillator in gen~ frequency-modulating itself at a single-sample delay (it was this short delay that made me need to use gen~). I used the rand~ object to modulate a number of parameters, including the starting frequency and modulation depth. This produces some nice staticky, rhythmic noises that sound like a very light synthetic snare.</p>
            <p>I then used Logic Pro's "flex time" feature to quantize the result to a 16th note grid (which also adds some nice time stretching artifacts!) </p>
            <audio controls>
                <source src="https:reillyspitzfaden.com/blog/media/02-27-2024/fm-fb-osc-rand_bip.7.mp3" type="audio/mp3">
            </audio>

            <p>I play two copies (one for left and one for right) of the sample with random modulation of the speed and direction.</p>
            <audio controls>
                <source src="https:reillyspitzfaden.com/blog/media/02-27-2024/fm-fb-osc-rand_bip.7_proc.mp3" type="audio/mp3">
            </audio>

            <h3>Sound 1 & 2 combined</h3>
            <p>Finally, when I put both the sustained and percussive sources into <code>fftz.ether~</code> the end result sounds like this:</p>
            <audio controls>
                <source src="https:reillyspitzfaden.com/blog/media/02-27-2024/spectral_composite_dry.mp3" type="audio/mp3">
            </audio>
            <p>I was going for something to fill out and add activity to the upper register, and I'm very happy with how it turned out.</p>

            <br />
            <h3>Conclusion</h3>
            <p>I want to give a shout out to <a href="https://nathan.ho.name/archive.html">Nathan Ho</a>. I appreciate his blogging about making sounds in SuperCollider, and it's inspired me to do write-ups of my own sound design. </p>
            <p>Today's sounds will be combined with the chord synthesizer I mentioned on Mastodon <a href="https://hachyderm.io/@reillypascal/111773037885275169">last month</a>. All of this is played by the keyboardist, with today's sound (and variants of it using different chords) each being assigned to a single MIDI note. Ideally I would like to be composing more quickly, but I'm teaching a class I've never taught before (Intro to Music Business), in addition to other teaching, so that's been taking up a lot of my time.</p>
            <p>If you'd like to try this for yourself, <a href="https://mega.nz/folder/cLVzHCBZ#SVlAyRb0RPL7sUwnXfke8A">here's</a> a link to the patches and other materials. You'll need the FFTease package and Max 8.</p>
            ]]> 
            </content:encoded>
        </item>
    
        <item>
            <title>Do Read the Comments</title>
            <dc:creator>Reilly Spitzfaden</dc:creator>
            <link>https://reillyspitzfaden.com/blog/01-14-2024</link>
            <guid>https://reillyspitzfaden.com/blog/01-14-2024</guid>
            <pubDate>Sun, 14 Jan 2024 00:00:00 EST</pubDate>
            <description>A writeup of using Netlify serverless functions and Supabase to code a comments section on a static site</description>
            <content:encoded><![CDATA[
            <p>My blog now has a comment section! Let's talk about how I made it.</p> 
            <p>It uses the <a href="https://supabase.com/">Supabase</a> Postgres database, which bills itself as an "open-source Firebase alternative." There are a number of ways of communicating with the database. I chose the <a href="https://github.com/supabase/supabase-js">supabase-js</a> JavaScript client since I'm familiar with JS, and because I wanted to use Netlify's <a href="https://www.netlify.com/blog/intro-to-serverless-functions/">"serverless" function</a> capabilities to run the code that communicates with the database.</p>

            <p>I considered several ways of getting the comments to display, including embedding a server-side-rendered page in an &lt;iframe&gt;, and using the pre-made "<a href="https://jsrepos.com/repo/a-blazing-fast-lightweight-and-open-source-comment-system-for-your-static-website-blogs-powered-by-supabase">SupaComments</a>" library, but it actually turned out to be easier to just do it myself with vanilla JavaScript. For the full code, see the <a href="https://github.com/reillypascal/personalsite/tree/main/reillyspitzfaden/netlify/functions">Netlify functions</a>, <a href="https://github.com/reillypascal/personalsite/blob/main/reillyspitzfaden/styles/scripts.js">global JS file</a>, and the <a href="https://github.com/reillypascal/personalsite/tree/main/reillyspitzfaden/blog">blog posts'</a> HTML files on GitHub. I'll walk through some of the most relevant parts here.</p> 
            
            <br />
            <h3>Handling Comment Submissions</h3>
            <p>In the form submission handler function, I make the form data into a FormData object. I then retrieve the commenter's name, email, and comment, as well as the URL of the blog post on which they're commenting. Note that in the code examples, I have left out the DOM-manipulating code to focus on handling the comment data.</p>

<pre><code class="language-js">// (from scripts.js)
// submit conmment handler - thisPostURL variable is 
// defined in the page that calls this function
const handleSubmitComment = async (event) => {
    event.preventDefault();

    // ... reset "Comment submitted!" message, if one exists

    // get form data
    const myForm = event.target;
    const formData = new FormData(myForm);
    // retrieve the needed fields from the FormData object
    const formObject = {
        name: formData.get("name"),
        email: formData.get("email"),
        postURL: thisPostURL,
        comment: formData.get("comment")
    };
    // ...</code></pre>

                <p>Since I didn't want the extra work of making a new table in my database every time I made a new blog post, I have all the comments go to a single table. Each blog post tags the comments on it with the post's URL, and uses that URL to retrieve only the appropriate comments.</p>

                <p>After the comment is formatted into an object, I use the <code class="language-js" >fetch()</code> API to send the comment data to the serverless function in the body of a POST request.</p>


    <pre><code class="language-js" >    // ... (continued from above)
    // call the serverless function and send it 
    // formObject in the body of the request
    const response = await fetch('/.netlify/functions/set_comment', {
        method: "POST",
        body: JSON.stringify(formObject)
    })
    // ...</code></pre>

                                <p>From there, the rest of the handler prints either a success or error message under the comment submission form.</p>

    <pre><code class="language-js" >    // ... (continued from above)
    .then(response => {
        // ... reset form to indicate comment submitted,
        // and print success message below
    })
    .catch(error => {
        // ... reset form to indicate comment submitted, 
        // and print error message below
    });
};</code></pre>
                            <br />
                            <h3>Handling the Comment Retrieval Button</h3>
                                <p>The handler for retrieving the comments is similar. Note that the body of the POST request only needs the post URL&mdash;this is used to select the comments that were made on a given blog post.</p>

<pre><code class="language-js" >// retrieve conmment handler - thisPostURL is defined in page
const handleGetComments = async (event) => {
    event.preventDefault();

    // ... erase any previously-displayed comments, load spinner .gif

    // call serverless function
    const response = await fetch('/.netlify/functions/get_comment', {
        method:'POST',
        body: JSON.stringify({
            postURL: thisPostURL
        })
    })
    // .json() returns a promise too, so there needs to be another .then()
    .then(response => response.json())
    .then(json => {
        // ... clear the spinner; test if there are any comments 
        // in the returned list; if so, iterate through them 
        // and add the appropriate HTML/text
    })
    .catch(error => {
        // ... clear the spinner; display an error message
    });
}</code></pre>

                            <br />
                            <h3>Supabase: Storing and Retrieving Comments</h3>
                            <p>The serverless functions to interface with Supabase need the 'dotenv' and 'supabase-js' Node packages, which are required from index.js in the root directory.</p>
<pre><code class="language-js" >require('dotenv').config();
require('@supabase/supabase-js');</code></pre>
            <p>In the function files, which are in netlify/functions&mdash;the default directory Netlify specifies&mdash;I get the URL and anon key for the database from Netlify's .env variables. Netlify lets you specify those from your site's console, so it's easy to keep them secure.</p>
<pre><code class="language-js" >const {
    DATABASE_URL,
    SUPABASE_SERVICE_API_KEY
} = process.env;</code></pre>
            <p>The meat of the setter function is the <code class="language-js" >.from()</code> method, which accesses the desired table, and the <code class="language-js" >.insert()</code> method, which adds the new entry. These are specified by the Supabase <a href="https://zone-www-dot-lmn02xr2l-supabase.vercel.app/docs/reference/javascript/select">API</a>. Netlify uses the ES modules default export syntax for the serverless functions, and the functions are automatically named after the files that contain them&mdash;<code class="language-js" >set_comment</code> and <code class="language-js" >get_comment</code> in my case.</p>

<pre><code class="language-js" >// create supabase client using url/anon key from Netlify env variables
const { createClient } = require('@supabase/supabase-js');
const supabase = createClient(DATABASE_URL, SUPABASE_SERVICE_API_KEY);

// uses ES modules syntax for default export
exports.handler = async (event, context, callback) => {
    let data
    try {
        // the result of createClient() can access the database
        data = await supabase
        // 'comments' is the name of the table 
        // within my database; .from() selects that
        .from('comments')
        // .insert() takes an array with one or more objects whose keys correspond
        // to those in the table, and adds each object as a new row to the table
        .insert([
            {   
                name: JSON.parse(event.body).name,
                email: JSON.parse(event.body).email,
                postURL: JSON.parse(event.body).postURL,
                comment: JSON.parse(event.body).comment,
                created_at: ((new Date()).toISOString()).toLocaleString('en-US'),
                show: true
            }
        ])
    } catch (e) {
        return {
            statusCode: 500,
            body: JSON.stringify({
                error: e.message
            })
        }
    }
    return {
        statusCode: 200,
        body: JSON.stringify(data)
    };
}</code></pre>

            <p>The getter function works similarly, but uses the <code class="language-js" >.select()</code> and <code class="language-js" >.eq()</code> methods. These specify the columns to return and a matching condition to indicate whether or not to return a row, respectively.</p>

<pre><code class="language-js" >exports.handler = async (event, context, callback) => {
    let returnVals
    try {
        returnVals = await supabase
        // as in set_comments, retrieves 'comments' table
        .from('comments')
        // selects the desired columns in each row
        .select('name, email, comment, created_at')
        // selects only the rows containing comments 
        // made at the blog post's URL
        .eq('postURL', JSON.parse(event.body).postURL)
        
    } catch (e) {
        return {
            statusCode: 500,
            body: JSON.stringify({
              error: e.message
            })
        }
    }
    return {
        statusCode: 200,
        body: JSON.stringify(returnVals.data)
    };
}</code></pre>
            <br />
            <h3>Conclusions</h3>
            <p>Some of the challenges I had in this project:</p>
            <ul>
                <li>It took me some trial and error to conceptualize exactly what the serverless functions needed to send back and forth with my site/Netlify.</li>
                <li>I had previously directly interfaced form submissions with Netlify for my contact form, but I needed to do a bit of reading to understand exactly how to get the information from the form into a format suitable to send in an HTTP POST request.</li>
            </ul>
            <p>One of my takeaways from this was that I should do more backend stuff. I haven't done much before, but I find it's a lot of fun to connect things together and make them communicate. Maybe a future project could include making my own database on my Raspberry Pi and setting up more complex interactions with it.</p>
            <p>Thanks for reading this far! In the near term, I'm planning to make an RSS feed for this blog&mdash;look for a similar write-up when I do that.</p>
            ]]> 
            </content:encoded>
        </item>

        <item>
            <title>Hello World!</title>
            <dc:creator>Reilly Spitzfaden</dc:creator>
            <link>https://reillyspitzfaden.com/blog/01-03-2024</link>
            <guid>https://reillyspitzfaden.com/blog/01-03-2024</guid>
            <pubDate>Wed, 03 Jan 2024 00:00:00 EST</pubDate>
            <description>An introduction to this blog and what I plan to do with it</description>
            <content:encoded><![CDATA[
            <p>Welcome to my blog! I recently listened to <a href="https://localghost.dev/">Sophie Koonin</a>'s talk "<a href="https://www.youtube.com/watch?v=H2Ux0hGQcs4">This Talk Is Under Construction: A Love Letter to the Personal Website</a>," as well as <a href="https://localghost.dev/blog/remembering-the-early-00s-teen-website-scene/">this blog post</a> about the early-aughts teen website scene, and was immediately inspired to do more to make this site into a piece of personal expression. One of the ways I'm doing that is starting this blog, which I'll be using as a free-form journal about my interests and for write-ups of current projects. Some interests include:</p>
            <ul>
                <li>Digital signal processing and audio plugin development in C++</li>
                <li>Composition in Max/MSP/gen</li>
                <li>Homemade electronics, often with a musical bent</li>
                <li>Various projects on my Raspberry Pi, including the <a href="https://geminiprotocol.net/">gemini</a> protocol, networking, and more</li>
                <li>The <a href="https://en.wikipedia.org/wiki/Fediverse">Fediverse</a> and "<a href="https://smolweb.org/index.html">smol web</a>" or "small web"</li>
            </ul>
            <p>RSS will likely be coming if I'm able to figure that out, as well as potentially a built-in comments feature. For now, I'll be posting updates to my <a href="https://hachyderm.io/@reillypascal">Mastodon</a> (and if you know me personally, on other personal social media!).</p>
            <p>I hope you'll join me!</p>
            ]]> 
            </content:encoded>
        </item>
    </channel>
</rss>